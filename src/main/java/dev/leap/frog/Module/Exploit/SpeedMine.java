package dev.leap.frog.Module.Exploit;

import dev.leap.frog.Event.Movement.EventPlayerBreakBlock;
import dev.leap.frog.Manager.UtilManager;
import dev.leap.frog.Module.Module;
import dev.leap.frog.Settings.Setting;
import dev.leap.frog.Util.Math.Mathutil;
import dev.leap.frog.Util.Render.RenderTessellatorutil;
import dev.leap.frog.Util.Render.Renderutil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;

public class SpeedMine extends Module {

    public SpeedMine() {
        super("Speed Mine", "Attempts to speed up digging", Type.EXPLOIT);
    }

    Setting<Mode> mode = create("Mode", Mode.Normal);
    Setting<Boolean> render = create("Render", true);
    Setting<Boolean> pickaxeOnly = create("Pickaxe only", false);

    private boolean breaking = false;
    private BlockPos pos;

    private enum Mode {
        Normal,
        Spoof,
        Bypass,
        Instant
    }

    @Override
    public void onUpdate() {
        if(UtilManager.nullCheck()) return;

      
    }

    @EventHandler
    private Listener<EventPlayerBreakBlock> breakBlockListener = new Listener<>(event -> {
        if(pickaxeOnly.getValue() && !(mc.player.getHeldItemMainhand().getItem() instanceof ItemPickaxe) || !(mc.player.getHeldItemOffhand().getItem() instanceof ItemPickaxe)) {
            return;
        }
        if(canBreak(event.getPos())) {
            this.pos = event.getPos();
            switch (mode.getValue()) {
                case Normal:
                    if (mc.playerController.curBlockDamageMP >= 0.7f) {
                        mc.playerController.curBlockDamageMP = 1.0f;
                    }
                    break;
                case Spoof:
                    mc.player.swingArm(EnumHand.MAIN_HAND);
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getPos(), event.getFacing()));
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getPos(), event.getFacing()));
                    event.cancel();
                    break;
                case Instant:
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getPos(), event.getFacing()));
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getPos(), event.getFacing()));
                    mc.world.setBlockToAir(event.getPos());
                    event.cancel();
                    break;
                case Bypass:
                    mc.playerController.curBlockDamageMP += 1.0f;
            }
        }
    });

    @Override
    public void onRender() {
        //if(render.getValue() && this.pos != null) {
        //    if(isBreakable(this.pos)) {
        //        render(this.pos, true);
        //        RenderHelputil.release();
        //    } else {
        //        render(this.pos, false);
        //    }
        //}
    }

    private boolean isBreakable(BlockPos pos) {
        IBlockState state = mc.world.getBlockState(pos);
        Block block = state.getBlock();
        return state.getBlock() != Blocks.BEDROCK;
    }

    @SuppressWarnings("deprecation")
    private boolean canBreak(BlockPos pos) {
        IBlockState blockState = mc.world.getBlockState(pos);
        return blockState.getBlock().getBlockHardness(blockState, mc.world, pos) != -1;
    }

    private void render(BlockPos bp, boolean breakable) {
        IBlockState state = mc.world.getBlockState(bp);
        Vec3d interpos = Mathutil.getInterpolatedPos(mc.player, mc.getRenderPartialTicks());
        Renderutil.drawFullBox(state.getSelectedBoundingBox(mc.world, bp).grow(0.0020000000949949026).offset(-interpos.x, -interpos.y, -interpos.z), bp, 1.5f, breakable ? 255 : 200, breakable ? 255 : 0, breakable ? 255 : 0, 200, 0);
        RenderTessellatorutil.prepare("quads");
        RenderTessellatorutil.drawCube(bp, breakable ? 255 : 200, breakable ? 255 : 0, breakable ? 255 : 0, 200, "all");
        RenderTessellatorutil.release();
    }
}
